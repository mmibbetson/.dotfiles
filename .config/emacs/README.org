#+TITLE: Matt's GNU Emacs Config
#+AUTHOR: Matthew Ibbetson (mmibbetson)
#+DESCRIPTION: mmibbetson's personal Emacs config.
#+STARTUP: showeverything
#+OPTIONS: toc:2
#+PROPERTY: header-args:emacs-lisp :tangle config.el

* INSPIRATION

https://codeberg.org/ashton314/emacs-bedrock


* Loading Configuration

We tell ~init.el~ (which is loaded on startup) to load ~config.el~ (which is where we will be outputting most of our config into).

#+begin_src emacs-lisp :tangle init.el
  (load (expand-file-name "config.el" user-emacs-directory))
#+end_src


* Package Management

** Elpaca

This is the setup for the asynchronous package manager. Note that we early init emacs to turn off a package setting to ensure there is no conflict with Emacs' default /package.el/.

#+begin_src emacs-lisp :tangle early-init.el
  (setq package-enable-at-startup nil)
#+end_src

#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.7)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
				:ref nil :depth 1
				:files (:defaults "elpaca-test.el" (:exclude "extensions"))
				:build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
	 (build (expand-file-name "elpaca/" elpaca-builds-directory))
	 (order (cdr elpaca-order))
	 (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
	  (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
		   ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
						   ,@(when-let ((depth (plist-get order :depth)))
						       (list (format "--depth=%d" depth) "--no-single-branch"))
						   ,(plist-get order :repo) ,repo))))
		   ((zerop (call-process "git" nil buffer t "checkout"
					 (or (plist-get order :ref) "--"))))
		   (emacs (concat invocation-directory invocation-name))
		   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
					 "--eval" "(byte-recompile-directory \".\" 0 'force)")))
		   ((require 'elpaca))
		   ((elpaca-generate-autoloads "elpaca" repo)))
	      (progn (message "%s" (buffer-string)) (kill-buffer buffer))
	    (error "%s" (with-current-buffer buffer (buffer-string))))
	((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))

  (elpaca elpaca-use-package
    (elpaca-use-package-mode))
#+end_src

When installing a package which modifies a form used at the top-level (e.g. a package which adds a use-package
key word), use the :wait recipe keyword to block until that package has been installed/configured.
or example: /(use-package general :ensure (:wait t) :demand t)/


* Notes and Writing

** Org

#+begin_src emacs-lisp
  (use-package org
    :bind (:map org-mode-map ("C-c t" . org-babel-tangle)))
  
  ;; From the org-modern recommendations
  (setq org-auto-align-tags nil
	org-tags-column 0
	org-catch-invisible-edits 'show-and-error
	org-special-ctrl-a/e t
	org-insert-heading-respect-content t
	org-hide-emphasis-markers t
	org-pretty-entities t)

  ;; Quick blocks
  (require 'org-tempo)
#+end_src


** Org Agenda

#+begin_src emacs-lisp
   (setq org-agenda-tags-column 0
	 org-agenda-block-separator ?─
	 org-agenda-time-grid
	 '((daily today require-timed)
	   (800 1000 1200 1400 1600 1800 2000)
	   " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
	 org-agenda-current-time-string
	 "◀── now ─────────────────────────────────────────────────")
#+end_src


** Org Modern

Alternative to combining org-bullets with other things.

#+begin_src emacs-lisp
(use-package org-modern
  :ensure t
  :demand t
  :init (add-hook 'org-mode-hook #'org-modern-mode)
        (add-hook 'org-agenda-finalize-hook #'org-modern-agenda))
#+end_src


** ToC Org

#+begin_src emacs-lisp
(use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src


** Denote

#+begin_src emacs-lisp

#+end_src


* Utilities

** Avy

Rapid, convenient movement through text. Ala ~gw~ in Helix or the million Neovim ones like ~Flash~ and ~Sneak~

#+begin_src emacs-lisp

#+end_src


** Vertico

#+begin_src emacs-lisp

#+end_src


** Consult 

#+begin_src emacs-lisp

#+end_src


** Corfu

#+begin_src emacs-lisp

#+end_src


** Marginalia

#+begin_src emacs-lisp

#+end_src


** Embark

#+begin_src emacs-lisp

#+end_src


** Orderless

#+begin_src emacs-lisp

#+end_src


** Jinx

Spellchecking with Hunspell

#+begin_src emacs-lisp

#+end_src


** Which-Key

which-key is built into emacs 30!

#+begin_src emacs-lisp
  (use-package which-key :ensure t :demand t :config (which-key-mode))
#+end_src


** Magit

The weird Seq stuff and the transient install are a workaround to resolve a dependency versioning issue...

#+begin_src emacs-lisp
  (defun +elpaca-unload-seq (e)
    (and (featurep 'seq) (unload-feature 'seq t))
    (elpaca--continue-build e))

  ;; You could embed this code directly in the reicpe, I just abstracted it into a function.
  (defun +elpaca-seq-build-steps ()
    (append (butlast (if (file-exists-p (expand-file-name "seq" elpaca-builds-directory))
			 elpaca--pre-built-steps elpaca-build-steps))
	    (list '+elpaca-unload-seq 'elpaca--activate-package)))

  (elpaca `(seq :build ,(+elpaca-seq-build-steps)))
  
  (use-package transient :ensure t :demand t)
  (use-package magit :after transient  :ensure t :demand t)
#+end_src


** Dired

#+begin_src emacs-lisp

#+end_src


* Programming Languages

** LSP

#+begin_src emacs-lisp

#+end_src


** Lisp

#+begin_src emacs-lisp

#+end_src


** Clojure

#+begin_src emacs-lisp

#+end_src


** Scheme

#+begin_src emacs-lisp

#+end_src


** Racket

#+begin_src emacs-lisp

#+end_src


** JavaScript

#+begin_src emacs-lisp

#+end_src


** .NET

#+begin_src emacs-lisp

#+end_src


** YAML

#+begin_src emacs-lisp

#+end_src


** Zig

#+begin_src emacs-lisp

#+end_src


* Aesthetics

I prefer a minimal visual aesthetic.

** Fonts

Iosevka variants galore

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :family "Iosevka")
  (set-face-attribute 'variable-pitch nil :family "Iosevka Aile")
#+end_src

** Theme

This theme is temporary!

#+begin_src emacs-lisp
  (load-theme 'modus-vivendi t)
#+end_src

** Transparency

#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(alpha-background . 90))
#+end_src

** Solaire Mode

#+begin_src emacs-lisp

#+end_src


** Modeline

#+begin_src emacs-lisp

#+end_src


** Bars

Turn off the bars from the default UI.

#+begin_src emacs-lisp
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
#+end_src


** Lines

Add relative line numbers, truncate, and highlight current line

#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
  (global-hl-line-mode 1)
  (global-visual-line-mode t)
  (setq display-line-numbers 'relative)
#+end_src


** Miscellaneous

Remove startup message and switch bell to visual

#+begin_src emacs-lisp
  (delete-selection-mode 1)
  (electric-indent-mode -1)
  (global-auto-revert-mode t)
  (setq inhibit-startup-message t
	visible-bell t)
#+end_src


* Keybindings

** Global Bindings

It seems that for global keymaps, we have to use this /global-set-key/ function.

#+begin_src emacs-lisp
  ;; Zoom in and out
  (global-set-key (kbd "C-=") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
  (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src


* Other

** File Behaviour

#+begin_src emacs-lisp
  (setq make-backup-files nil)
#+end_src

