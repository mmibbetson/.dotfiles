#+TITLE: Matt's GNU Emacs Config
#+AUTHOR: Matthew Ibbetson (mmibbetson)
#+DESCRIPTION: mmibbetson's personal Emacs config.
#+STARTUP: showeverything
#+OPTIONS: toc:2
#+PROPERTY: header-args:emacs-lisp :tangle config.el

* Packages

** Elpaca

This is the setup for the asynchronous package manager. Note that /(setq package-enable-at-startup nil)/
has been added to /early-init.el/ to ensure there is no conflict with Emacs' default /package.el/.

#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.7)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
				:ref nil :depth 1
				:files (:defaults "elpaca-test.el" (:exclude "extensions"))
				:build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
	 (build (expand-file-name "elpaca/" elpaca-builds-directory))
	 (order (cdr elpaca-order))
	 (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
	  (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
		   ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
						   ,@(when-let ((depth (plist-get order :depth)))
						       (list (format "--depth=%d" depth) "--no-single-branch"))
						   ,(plist-get order :repo) ,repo))))
		   ((zerop (call-process "git" nil buffer t "checkout"
					 (or (plist-get order :ref) "--"))))
		   (emacs (concat invocation-directory invocation-name))
		   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
					 "--eval" "(byte-recompile-directory \".\" 0 'force)")))
		   ((require 'elpaca))
		   ((elpaca-generate-autoloads "elpaca" repo)))
	      (progn (message "%s" (buffer-string)) (kill-buffer buffer))
	    (error "%s" (with-current-buffer buffer (buffer-string))))
	((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))

  (elpaca elpaca-use-package
    (elpaca-use-package-mode))
#+end_src

When installing a package which modifies a form used at the top-level (e.g. a package which adds a use-package
key word), use the :wait recipe keyword to block until that package has been installed/configured.

For example: /(use-package general :ensure (:wait t) :demand t)/

** Vertico

#+begin_src emacs-lisp

#+end_src


*** Consult 

#+begin_src emacs-lisp

#+end_src


*** ???

#+begin_src emacs-lisp

#+end_src

*** ???

#+begin_src emacs-lisp

#+end_src

** Which-Key 

#+begin_src emacs-lisp

#+end_src


** Org 

#+begin_src emacs-lisp

#+end_src


*** Org-Roam 

#+begin_src emacs-lisp

#+end_src


* Aesthetics

I prefer a minimal visual aesthetic.

** Fonts

arstgmneio

#+begin_src emacs-lisp

#+end_src

** Theme

This theme is temporary!

#+begin_src emacs-lisp
  (load-theme 'modus-vivendi t)
#+end_src

** Bars

Turn off the bars from the default UI.

#+begin_src emacs-lisp
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
#+end_src

** Lines

Add relative line numbers, truncate, and highlight current line

#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
  (global-hl-line-mode 1)
  (global-visual-line-mode t)
  (setq display-line-numbers 'relative)
#+end_src

** Miscellaneous

Remove startup message and switch bell to visual

#+begin_src emacs-lisp
  (setq inhibit-startup-message t
	visible-bell t)
#+end_src

* Keybindings

** Global Bindings

It seems that for global keymaps, we have to use this /global-set-key/ function.

#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** Org Mode Bindings

#+begin_src emacs-lisp
  (use-package org
    :bind (:map org-mode-map ("C-c t" . org-babel-tangle)))
#+end_src

* Other

** File Behaviour

#+begin_src emacs-lisp
  (setq make-backup-files nil)
#+end_src
